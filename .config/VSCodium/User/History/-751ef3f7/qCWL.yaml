# -- Enable the whole component
enabled: true
# -- Override the full names of all resources
fullnameOverride: "thanos"
## @param objstoreConfig The [objstore configuration](https://thanos.io/tip/thanos/storage.md/)
## Specify content for objstore.yml
objstoreConfig: |-
  type: S3
  config:
    bucket: "thanos-test"
    endpoint: "s3storage.cloudical.in"
    region: "eu-mid-fsn1-dc18"
    access_key: "thanos-test"
    secret_key: "6YWPyEXJh4FwdnIxx7NzWlSFAp9vKi7p"
## if not specified as empty string secret won't be genereted
existingObjstoreSecret: ""
## @param existingObjstoreSecretItems Optional item list for specifying a custom Secret key. If so, path should be objstore.yml
existingObjstoreSecretItems:
  - key: objstore.yml
    path: objstore.yml
## @section Thanos Query parameters
query:
  enabled: true
  ## Dynamically configure store APIs using DNS discovery
  ## @param query.dnsDiscovery.enabled Enable store APIs discovery via DNS
  ## @param query.dnsDiscovery.sidecarsService Sidecars service name to discover them using DNS discovery
  ## @param query.dnsDiscovery.sidecarsNamespace Sidecars namespace to discover them using DNS discovery
  dnsDiscovery:
    enabled: true
    sidecarsService: "prometheus-stack-thanos-discovery"
    sidecarsNamespace: "clops-test"
  # -- Resource requests and limits
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
    limits:
      cpu: 1
      memory: 1Gi
## @section Thanos Query Frontend parameters
queryFrontend:
  enabled: true
  # -- Resource requests and limits
  resources:
    requests:
      cpu: 500m
      memory: 256Mi
    limits:
      cpu: 1
      memory: 512Mi
  ## Configure the ingress resource that allows you to access Thanos Query Frontend
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    ## @param queryFrontend.ingress.enabled Enable ingress controller resource
    enabled: true
    ## @param queryFrontend.ingress.hostname Default host for the ingress resource
    hostname: "thanos.clops-test.cloudical.in"
    ingressClassName: "nginx"
    annotations: {}
    ## @param queryFrontend.ingress.tls Enable TLS configuration for the hostname defined at `queryFrontend.ingress.hostname` parameter
    tls: true
## @section Thanos Bucket Web parameters
bucketweb:
  enabled: true
  # -- Resource requests and limits
  resources:
    requests:
      cpu: 50m
      memory: 64Mi
    limits:
      cpu: 100m
      memory: 128Mi
## @section Thanos Compactor parameters
compactor:
  enabled: true
  ## Resolution and Retention flags
  ## @param compactor.retentionResolutionRaw Resolution and Retention flag
  ## @param compactor.retentionResolution5m Resolution and Retention flag
  ## @param compactor.retentionResolution1h Resolution and Retention flag
  retentionResolutionRaw: 30d
  retentionResolution5m: 90d
  retentionResolution1h: 1y  
  # -- Resource requests and limits
  resources:
    requests:
      cpu: 100m
      memory: 256Mi
    limits:
      cpu: 200m
      memory: 512Mi
  ## Persistence parameters
  persistence:
    enabled: true
    storageClass: ""
    size: 8Gi
## @section Thanos Store Gateway parameters
storegateway:
  enabled: true
  # -- Resource requests and limits
  resources:
    requests:
      cpu: 250m
      memory: 512Mi
    limits:
      cpu: 500m
      memory: 1Gi
  ## Persistence parameters
  persistence:
    enabled: true
    storageClass: ""
    size: 8Gi
## @section Thanos Receive parameters
receive:
  enabled: true
  # -- Resource requests and limits
  resources:
    requests:
      cpu: 500m
      memory: 4Gi
    limits:
      cpu: 1
      memory: 8Gi
  ## Persistence parameters
  persistence:
    enabled: true
    storageClass: ""
    size: 8Gi
  ## Configure the ingress resource that allows you to access Thanos Query Frontend
  ## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
  ingress:
    ## @param queryFrontend.ingress.enabled Enable ingress controller resource
    enabled: true
    ## @param queryFrontend.ingress.hostname Default host for the ingress resource
    hostname: "thanos-receive.clops-test.cloudical.in"
    ingressClassName: "nginx"
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
    ## @param queryFrontend.ingress.tls Enable TLS configuration for the hostname defined at `queryFrontend.ingress.hostname` parameter
    tls: true
## Prometheus metrics
metrics:
  enabled: true
  ## Prometheus Operator ServiceMonitor configuration
  serviceMonitor:
    enabled: true
    ## @param metrics.serviceMonitor.namespace Namespace in which Prometheus is running
    namespace: "clops-test"