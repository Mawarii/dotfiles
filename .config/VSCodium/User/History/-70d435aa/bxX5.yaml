---
- name: Ensure {{ installation_path }}/{{ folder.redash }} directory exists
  ansible.builtin.file:
    path: "{{ installation_path }}/redash"
    state: directory

- name: Check whether .env already exists so that the passwords are not overwritten
  ansible.builtin.stat:
    path: "{{ installation_path }}/redash/.env"
  register: stat_res

- name: Generate redash .env file if it does not exist
  ansible.builtin.template:
    src: "./redash/redash.env.j2"
    dest: "{{ installation_path }}/redash/.env"
  when: not stat_res.stat.exists

- name: Generate redash compose file
  ansible.builtin.template:
    src: "./redash/redash-compose.yaml.j2"
    dest: "{{ installation_path }}/redash/compose.yaml"

- name: Create database tables for redash
  ansible.builtin.command: "docker compose -f {{ installation_path }}/redash/compose.yaml run --rm server create_db"

- name: Create admin user for redash
  ansible.builtin.command: "docker compose -f {{ installation_path }}/redash/compose.yaml run --rm server ./manage.py users create_root {{ admin2@example.com }} admin2 --password {{ redash_admin_password }} --org ichmagkekse"

- name: Create and start services
  community.docker.docker_compose_v2:
    project_src: "{{ installation_path }}/redash"
    wait: true

# get redash_api_key
