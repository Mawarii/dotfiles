# Base image
FROM php:8.1.16-fpm-alpine3.17 AS base

ARG APPDIR=/var/www/project
WORKDIR ${APPDIR}
COPY ./default.conf /etc/nginx/http.d/default.conf
RUN apk add --no-cache unzip openssh git

# Build stage for development environment
FROM base AS develop

# Install composer
COPY --from=composer/composer:lts /usr/bin/composer /usr/bin/composer

# Install dependencies
RUN apk add --no-cache nginx php81-pecl-apcu \
    && apk add --update --no-cache --virtual .build-dependencies $PHPIZE_DEPS linux-headers busybox-suid\
    && docker-php-ext-install pdo pdo_mysql \
    && pecl install apcu xdebug \
    && docker-php-ext-enable apcu xdebug \
    && pecl clear-cache \
    && apk del .build-dependencies

# Copy xdebug configuration
COPY build/app/docker-php-ext-xdebug.ini /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini

# Copy timezone configuration
COPY build/app/timezone.ini /usr/local/etc/php/conf.d/timezone.ini

# Copy project files
COPY project ${APPDIR}

# Test nginx configuration
RUN nginx -t

# Start PHP fpm and nginx
EXPOSE 8080
CMD ["sh", "-c", "php-fpm -D && nginx -g 'daemon off;'"]

FROM base AS builder
ENV APP_ENV=prod

# Copy Project
COPY project ${APPDIR}

# Install composer packages
COPY --from=composer/composer:lts /usr/bin/composer /usr/bin/composer
RUN cd /var/www/project \
    && composer install --no-dev --no-scripts --optimize-autoloader

# Warmup cache
RUN rm -rf ${APPDIR}/var \
    && mkdir ${APPDIR}/var \
    && bin/console cache:warmup


FROM base AS runner
# Set environment variables
ENV APP_ENV=prod

## log file deletion cron
RUN echo -e "0\t*\t*\t*\t*\t/var/www/project/bin/console oots:delete-log-file" >> /var/spool/cron/crontabs/root

# Set short commit hash environment variable
ARG CI_COMMIT_SHORT_SHA
ENV CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA

# Set non-root user and group
RUN deluser --remove-home www-data \
    && addgroup -g 10001 -S symfony \
    && adduser -u 10001 -S symfony -G symfony

# Install runner dependencies
RUN apk add --no-cache nginx php81-pecl-apcu \
    && apk add --no-cache --update --virtual .build-dependencies $PHPIZE_DEPS \
    && docker-php-ext-install pdo pdo_mysql \
    && pecl install apcu \
    && docker-php-ext-enable apcu \
    && pecl clear-cache \
    && apk del .build-dependencies

# Setup nginx
COPY build/app/default.conf /etc/nginx/http.d/default.conf

RUN sed -i '/user nginx;/d' /etc/nginx/nginx.conf \
    && nginx -t

# Copy App
COPY --from=builder ${APPDIR} ${APPDIR}

# Adjust ownership and permissions for log directory
RUN chown -R symfony:symfony /var/www/project/var/log  \
    && chown -R symfony:symfony /var/lib/nginx/logs/* /run/nginx/* /var/lib/nginx

# Setup crontab
RUN echo -e "*\t*\t*\t*\t*\t/var/www/project/bin/console oots:domibus-worker" | crontab -u symfony - \
    && echo -e "*\t*\t*\t*\t*\t(sleep 6 && /var/www/project/bin/console oots:domibus-worker)" | crontab -u symfony - \
    && echo -e "*\t*\t*\t*\t*\t(sleep 12 && /var/www/project/bin/console oots:domibus-worker)" | crontab -u symfony - \
    && echo -e "*\t*\t*\t*\t*\t(sleep 18 && /var/www/project/bin/console oots:domibus-worker)" | crontab -u symfony - \
    && echo -e "*\t*\t*\t*\t*\t(sleep 24 && /var/www/project/bin/console oots:domibus-worker)" | crontab -u symfony - \
    && echo -e "*\t*\t*\t*\t*\t(sleep 30 && /var/www/project/bin/console oots:domibus-worker)" | crontab -u symfony - \
    && echo -e "*\t*\t*\t*\t*\t(sleep 36 && /var/www/project/bin/console oots:domibus-worker)" | crontab -u symfony - \
    && echo -e "*\t*\t*\t*\t*\t(sleep 42 && /var/www/project/bin/console oots:domibus-worker)" | crontab -u symfony - \
    && echo -e "*\t*\t*\t*\t*\t(sleep 48 && /var/www/project/bin/console oots:domibus-worker)" | crontab -u symfony - \
    && echo -e "*\t*\t*\t*\t*\t(sleep 54 && /var/www/project/bin/console oots:domibus-worker)" | crontab -u symfony - \
    && echo -e "0\t*\t*\t*\t*\t/var/www/project/bin/console oots:delete-log-file" | crontab -u symfony -

# Switch to non-root user
USER symfony
RUN touch /run/nginx/nginx.pid

# Start PHP fpm and nginx
EXPOSE 8080

CMD ["sh", "-c", "crond && php-fpm -D && nginx -g 'daemon off;'"]
