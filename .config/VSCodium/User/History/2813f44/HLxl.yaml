apiVersion: apps/v1
kind: Deployment
metadata:
  name: identity-gateway
spec:
  replicas: 2
  selector:
    matchLabels:
      k8s-app: identity-gateway
  template:
    metadata:
      labels:
        k8s-app: identity-gateway
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: k8s-app
                      operator: In
                      values:
                        - identity-gateway
                topologyKey: "kubernetes.io/hostname"
      containers:
        - name: application
          image: DOCKER_IMAGE_1
          env:
            - name: REDIS_PW
              valueFrom:
                secretKeyRef:
                  key: redis-password
                  name: redis-standalone
            - name: REDIS_DSN
              value: "redis://default:$(REDIS_PW)@redis-standalone-master:6379"
            - name: FRANKENPHP_LOOP_MAX
              value: "4"
            - name: FRANKENPHP_WORKER_NUM
              value: "4"
            - name: TRUSTED_PROXIES
              value: "REMOTE_ADDR"
          envFrom:
            - secretRef:
                name: cluster-stage-vars
            - secretRef:
                name: identity-gateway-secrets
            - configMapRef:
                name: identity-gateway-configmap
          readinessProbe:
            httpGet:
              path: /health
              port: 8080
              httpHeaders:
                - name: Authorization
                  value: "Basic cHBfaGVhbHRoX2NoZWNrOnZoWXJQNEtvUkhoZkNjWXF3VzNYNHg0WDRxZTdldFJRQkRtaEpGZw=="
            initialDelaySeconds: 10
            timeoutSeconds: 5
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 8080
              httpHeaders:
                - name: Authorization
                  value: "Basic cHBfaGVhbHRoX2NoZWNrOnZoWXJQNEtvUkhoZkNjWXF3VzNYNHg0WDRxZTdldFJRQkRtaEpGZw=="
            initialDelaySeconds: 10
            timeoutSeconds: 10
            periodSeconds: 15
          ports:
            - containerPort: 8080
          securityContext:
            runAsUser: 10001
            runAsGroup: 10001
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /tmp
              name: tmp
            - mountPath: /app/var/log
              name: log
            - mountPath: /var/run
              name: run
            - mountPath: /app/var/cache
              name: cache
            - mountPath: /data
              name: caddy-data
            - mountPath: /config
              name: caddy-config
          resources:
            limits:
              cpu: "2000m"
              memory: "1Gi"
            requests:
              cpu: "1000m"
              memory: "512Mi"
        - name: version-sidecar
          image: DOCKER_IMAGE_2
          readinessProbe:
            httpGet:
              path: /
              port: 3000
            initialDelaySeconds: 5
            timeoutSeconds: 1
            periodSeconds: 15
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 15
          ports:
            - containerPort: 3000
          securityContext:
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            capabilities:
              drop: ["ALL"]
            seccompProfile:
              type: RuntimeDefault
          envFrom:
            - secretRef:
                name: cluster-stage-vars
          resources:
            limits:
              memory: "128Mi"
              cpu: "100m"
            requests:
              memory: "64Mi"
      securityContext:
        fsGroup: 10001
        runAsGroup: 10001
        runAsUser: 10001
      volumes:
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: log
        - emptyDir: {}
          name: run
        - emptyDir: {}
          name: cache
        - emptyDir: {}
          name: caddy-config
        - emptyDir: {}
          name: caddy-data
