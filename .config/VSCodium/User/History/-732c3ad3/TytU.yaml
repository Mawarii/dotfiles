---
- name: Detect Kubernetes versions
  block:
    - name: Detect running Kubernetes version
      ansible.builtin.shell:
        cmd: dpkg-query -W -f='${Version}' kubeadm
      changed_when: false
      register: kube_version_running_out

    - name: Detect latest Kubernetes version
      ansible.builtin.shell: |
        set -o pipefail
        apt-cache madison kubeadm | grep -F {{ kubernetes_version }} | head -1 | awk '{print $3}'
      args:
        executable: /bin/bash
      changed_when: false
      register: kube_version_latest_out

    - name: Set Kubernetes version variables
      ansible.builtin.set_fact:
        kube_version_running: "{{ kube_version_running_out.stdout | default('0.0.0-0.0', true) }}"
        kube_version_latest: "{{ kube_version_latest_out.stdout | default('0.0.0-0.0', true) }}"

    - name: Check if upgrade is needed
      ansible.builtin.set_fact:
        kube_upgrade_needed: "{{ kube_version_running is version_compare(kube_version_latest, '<') }}"

    - name: Upgrade Kubernetes packages
      when: auto_upgrades and kube_upgrade_needed
      ansible.builtin.apt:
        pkg:
          - kubelet={{ kube_version_latest.stdout }}
          - kubeadm={{ kube_version_latest.stdout }}
          - kubectl={{ kube_version_latest.stdout }}
        state: present
        update_cache: true
        allow_change_held_packages: true

- name: Detect CRI-O versions
  block:
    - name: Detect running CRI-O version
      ansible.builtin.shell:
        cmd: dpkg-query -W -f='${Version}' cri-o
      changed_when: false
      register: crio_version_running_out

    - name: Detect latest CRI-O version
      ansible.builtin.shell: |
        set -o pipefail
        apt-cache madison cri-o | grep -F {{ crio_version }} | head -1 | awk '{print $3}'
      args:
        executable: /bin/bash
      changed_when: false
      register: crio_version_latest_out

    - name: Set CRI-O version variables
      ansible.builtin.set_fact:
        crio_version_running: "{{ crio_version_running_out.stdout | default('0.0.0-0.0', true) }}"
        crio_version_latest: "{{ crio_version_latest_out.stdout | default('0.0.0-0.0', true) }}"

    - name: Check if upgrade is needed
      ansible.builtin.set_fact:
        crio_upgrade_needed: "{{ crio_version_running is version_compare(crio_version_latest, '<') }}"

    - name: Upgrade CRI-O packages
      when: auto_upgrades and crio_upgrade_needed
      ansible.builtin.apt:
        pkg:
          - cri-o={{ crio_version_latest.stdout }}
        state: present
        update_cache: true
        allow_change_held_packages: true

- name: Check kubeadm upgrade
  ansible.builtin.command:
    cmd: kubeadm upgrade plan
  changed_when: false

- name: Apply kubeadm upgrade
  ansible.builtin.command:
    cmd: kubeadm upgrade apply "v{{ kube_version_latest.split('-')[0] }}"
  changed_when: true
